name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  # Quality Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript types
        run: npx tsc --noEmit

      - name: Security audit
        run: npm audit --audit-level moderate

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Build & Deploy
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Run build tests
        run: |
          npx serve -s dist -p 3000 &
          sleep 5
          curl -f http://localhost:3000 || exit 1

      - name: Deploy to Vercel (Frontend)
        uses: vercel/vercel-action@v2
        with:
          vercel-token: "${{ secrets.VERCEL_TOKEN }}"
          vercel-org-id: "${{ secrets.VERCEL_ORG_ID }}"
          vercel-project-id: "${{ secrets.VERCEL_PROJECT_ID }}"
          working-directory: ./

      - name: Deploy to Railway (Backend)
        if: success()
        run: |
          echo "Backend deployment would go here"
          # Add Railway deployment commands when backend is ready

  # Performance Monitoring
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://portfolio-alpha-neon-54.vercel.app/
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notification
  notify:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [quality-checks, test, build-and-deploy]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: "${{ job.status }}"
          webhook_url: "${{ secrets.SLACK_WEBHOOK_URL }}"
          fields: repo,message,commit,author,action,eventName,ref,workflow